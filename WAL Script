local allowedPlaceIds = {
	8425637426, -- Replace with the allowed PlaceId(s)
}

if not table.find(allowedPlaceIds, game.PlaceId) then
	warn("This script is not allowed in this place.")
	return -- stops the script from continuing
end

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
	Name = "Write A Letter - Paper Hub ðŸ“„",
	Icon = 17104625041, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
	LoadingTitle = "Paper Hub v0.1",
	LoadingSubtitle = "by Dev_Smiley",
	ShowText = "Paper Hub ðŸ“„", -- for mobile users to unhide rayfield, change if you'd like
	Theme = "Amethyst", -- Check https://docs.sirius.menu/rayfield/configuration/themes

	ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

	DisableRayfieldPrompts = false,
	DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

	ConfigurationSaving = {
		Enabled = true,
		FolderName = nil, -- Create a custom folder for your hub/game
		FileName = "Big Hub"
	},

	Discord = {
		Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
		Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
		RememberJoins = true -- Set this to false to make them join the discord every time they load it up
	},

	KeySystem = false, -- Set this to true to use our key system
	KeySettings = {
		Title = "Untitled",
		Subtitle = "Key System",
		Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
		FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
		SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
		GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
		Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
	}
})

local PlayerTab = Window:CreateTab("LocalPlayer", 4483362458) -- Title, Image
local ESPTab = Window:CreateTab("ESP", 4483362458) -- Title, Image
local CSettingsTab = Window:CreateTab("Client Settings", 4483362458) -- Title, Image

local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")
local player = game.Players.LocalPlayer

--Local Player Functions

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local Camera = workspace.CurrentCamera

local Label = PlayerTab:CreateLabel("JumpSpeed Is Speed Which Is Same With WalkSpeed But Its Only Work When You Jump (Value 10 To Stop)", 4483362458, Color3.fromRGB(200, 162, 200), false)

local Input = PlayerTab:CreateInput({
    Name = "JumpSpeed",
    CurrentValue = "10",
    PlaceholderText = "Enter Jump Speed",
    RemoveTextAfterFocusLost = false,
    Flag = "JumpSpeedInput",
    Callback = function(Text)
        local player = game.Players.LocalPlayer
        if not player then return end

        -- Stop previous loop if exists
        if player:FindFirstChild("JumpSpeedLoop") then
            player.JumpSpeedLoop:Destroy()
        end

        -- Convert input to number
        local Value = tonumber(Text) or 10

        -- If value below 10 or empty, set WalkSpeed to 10 and stop loop
        if Value < 10 then
            local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = 10
            end
            return
        end

        -- Create loop to continuously set WalkSpeed
        local loopFlag = Instance.new("BoolValue")
        loopFlag.Name = "JumpSpeedLoop"
        loopFlag.Parent = player

        task.spawn(function()
            while loopFlag.Parent do
                local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.WalkSpeed = Value
                end
                task.wait(0.01)
            end
        end)
    end,
})

local Input = PlayerTab:CreateInput({
    Name = "JumpHeight",
    CurrentValue = "4.5",
    PlaceholderText = "Enter Jump Height",
    RemoveTextAfterFocusLost = false,
    Flag = "JumpHeightInput",
    Callback = function(Text)
        local player = game.Players.LocalPlayer
        if not player then return end

        -- Stop previous loop if exists
        if player:FindFirstChild("JumpHeightLoop") then
            player.JumpHeightLoop:Destroy()
        end

        -- Convert input to number
        local Value = tonumber(Text) or 8

        -- If value below 8 or empty, set JumpHeight to 8 and stop loop
        if Value < 8 then
            local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.JumpHeight = 8
            end
            return
        end

        -- Create loop to continuously set JumpHeight
        local loopFlag = Instance.new("BoolValue")
        loopFlag.Name = "JumpHeightLoop"
        loopFlag.Parent = player

        task.spawn(function()
            while loopFlag.Parent do
                local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.JumpHeight = Value
                end
                task.wait(0.01)
            end
        end)
    end,
})

local Input = PlayerTab:CreateInput({
    Name = "Hip Height",
    CurrentValue = "0",
    PlaceholderText = "Enter Hip Height",
    RemoveTextAfterFocusLost = false,
    Flag = "HipHeightInput",
    Callback = function(Text)
        local player = game.Players.LocalPlayer
        local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
        local Value = tonumber(Text) or 0 -- default to 0 if empty or invalid
        if humanoid then
            humanoid.HipHeight = Value
        end
    end,
})

local Input = PlayerTab:CreateInput({
    Name = "Max Camera Zoom",
    CurrentValue = "15",
    PlaceholderText = "Enter Max Zoom",
    RemoveTextAfterFocusLost = false,
    Flag = "MaxCameraZoomInput",
    Callback = function(Text)
        local player = game.Players.LocalPlayer
        if not player then return end

        -- Stop previous loop if it exists
        if player:FindFirstChild("CameraMaxZoomLoop") then
            player.CameraMaxZoomLoop:Destroy()
        end

        -- Convert input to number
        local Value = tonumber(Text) or 15

        -- Create loop holder
        local loopFlag = Instance.new("BoolValue")
        loopFlag.Name = "CameraMaxZoomLoop"
        loopFlag.Parent = player

        task.spawn(function()
            while loopFlag.Parent do
                -- Stop loop automatically if Value drops below 15
                if Value < 15 then
                    player.CameraMaxZoomDistance = 15
                    loopFlag:Destroy()
                    break
                end

                player.CameraMaxZoomDistance = Value
                task.wait(0.01)
            end
        end)
    end,
})

local Toggle = PlayerTab:CreateToggle({
    Name = "NoClip Camera",
    CurrentValue = false,
    Flag = "NoClipCamera",
    Callback = function(Value)
        local player = game.Players.LocalPlayer
        if not player then return end

        if Value then
            -- Camera can see through walls
            player.DevCameraOcclusionMode = Enum.DevCameraOcclusionMode.Invisicam
        else
            -- Normal camera collision
            player.DevCameraOcclusionMode = Enum.DevCameraOcclusionMode.Zoom
        end
    end
})

--Toggle Buttons For Boolens
local Button = PlayerTab:CreateButton({
	Name = "Sit Player",
	Callback = function()
		game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid").Sit = true-- The function that takes place when the button is pressed
	end,
})


local Button = PlayerTab:CreateButton({
	Name = "Reset",
	Callback = function()
		game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid").Health = 0-- The function that takes place when the button is pressed
	end,
})

----------------------------------------------------------------------------------------------------------------------------------------
--ESP Functions

-- SnowHouseKeys ESP
local snowHouseFolder = workspace:WaitForChild("Pickups"):WaitForChild("SnowHouseKeys")
local snowAddedBillboards = {}
local snowConnections = {}

local function addSnowBillboard(part)
    if not part:IsA("BasePart") or snowAddedBillboards[part] then return end

    local billboard = Instance.new("BillboardGui")
    billboard.Name = "SnowKeyBillboard"
    billboard.Adornee = part
    billboard.Size = UDim2.new(0, 50, 0, 25)
    billboard.AlwaysOnTop = true
    billboard.Parent = part

    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = part.Name
    textLabel.TextScaled = true
    textLabel.TextColor3 = Color3.fromRGB(173, 216, 230) -- light blue
    textLabel.Parent = billboard

    snowAddedBillboards[part] = billboard
end

local function removeSnowBillboards()
    for part, billboard in pairs(snowAddedBillboards) do
        if billboard and billboard.Parent then
            billboard:Destroy()
        end
    end
    table.clear(snowAddedBillboards)
    for _, conn in ipairs(snowConnections) do
        conn:Disconnect()
    end
    table.clear(snowConnections)
end

local SnowToggle = ESPTab:CreateToggle({
    Name = "SnowHouseKeys ESP",
    CurrentValue = false,
    Flag = "SnowHouseKeysESP",
    Callback = function(Value)
        if Value then
            for _, part in ipairs(snowHouseFolder:GetDescendants()) do
                if part:IsA("BasePart") then addSnowBillboard(part) end
            end
            table.insert(snowConnections, snowHouseFolder.DescendantAdded:Connect(function(desc)
                if desc:IsA("BasePart") then addSnowBillboard(desc) end
            end))
            table.insert(snowConnections, snowHouseFolder.DescendantRemoving:Connect(function(desc)
                if snowAddedBillboards[desc] then
                    snowAddedBillboards[desc]:Destroy()
                    snowAddedBillboards[desc] = nil
                end
            end))
        else
            removeSnowBillboards()
        end
    end
})

-- TrowelPickups ESP
local trowelFolder = workspace:WaitForChild("Pickups"):WaitForChild("TrowelPickups")
local trowelAdded = {}
local trowelConnections = {}

local function getModelAdornee(model)
    if model:IsA("Model") then
        return model.PrimaryPart or model:FindFirstChildWhichIsA("BasePart")
    end
    return nil
end

local function addTrowelBillboard(model)
    if not model:IsA("Model") or trowelAdded[model] then return end
    local adornee = getModelAdornee(model)
    if not adornee then return end

    local billboard = Instance.new("BillboardGui")
    billboard.Name = "TrowelBillboard"
    billboard.Adornee = adornee
    billboard.Size = UDim2.new(0, 50, 0, 25)
    billboard.AlwaysOnTop = true
    billboard.Parent = adornee

    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = model.Name
    textLabel.TextScaled = true
    textLabel.TextColor3 = Color3.fromRGB(173, 216, 230)
    textLabel.Parent = billboard

    trowelAdded[model] = billboard
end

local function removeTrowelBillboards()
    for model, billboard in pairs(trowelAdded) do
        if billboard and billboard.Parent then
            billboard:Destroy()
        end
    end
    table.clear(trowelAdded)
    for _, conn in ipairs(trowelConnections) do
        conn:Disconnect()
    end
    table.clear(trowelConnections)
end

local TrowelToggle = ESPTab:CreateToggle({
    Name = "Trowel ESP",
    CurrentValue = false,
    Flag = "TrowelPickupsESP",
    Callback = function(Value)
        if Value then
            for _, child in ipairs(trowelFolder:GetChildren()) do
                if child:IsA("Model") then addTrowelBillboard(child) end
            end
            table.insert(trowelConnections, trowelFolder.ChildAdded:Connect(function(child)
                if child:IsA("Model") then addTrowelBillboard(child) end
            end))
            table.insert(trowelConnections, trowelFolder.ChildRemoved:Connect(function(child)
                if trowelAdded[child] then
                    trowelAdded[child]:Destroy()
                    trowelAdded[child] = nil
                end
            end))
        else
            removeTrowelBillboards()
        end
    end
})

-- Candle ESP
local candleModel = workspace:WaitForChild("Pickups"):WaitForChild("Candle")
local candleBillboard

local function addCandleBillboard()
    if candleBillboard then return end
    local adornee = candleModel.PrimaryPart or candleModel:FindFirstChildWhichIsA("BasePart")
    if not adornee then return end

    candleBillboard = Instance.new("BillboardGui")
    candleBillboard.Name = "CandleBillboard"
    candleBillboard.Adornee = adornee
    candleBillboard.Size = UDim2.new(0, 50, 0, 25)
    candleBillboard.AlwaysOnTop = true
    candleBillboard.Parent = adornee

    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = candleModel.Name
    textLabel.TextScaled = true
    textLabel.TextColor3 = Color3.fromRGB(173, 216, 230)
    textLabel.Parent = candleBillboard
end

local function removeCandleBillboard()
    if candleBillboard and candleBillboard.Parent then
        candleBillboard:Destroy()
        candleBillboard = nil
    end
end

local CandleToggle = ESPTab:CreateToggle({
    Name = "Candle ESP",
    CurrentValue = false,
    Flag = "CandleESP",
    Callback = function(Value)
        if Value then
            addCandleBillboard()
        else
            removeCandleBillboard()
        end
    end
})

-- Hammer ESP
local hammerModel = workspace:WaitForChild("Pickups"):WaitForChild("Hammer")
local hammerBillboard

local function addHammerBillboard()
    if hammerBillboard then return end
    local adornee = hammerModel.PrimaryPart or hammerModel:FindFirstChildWhichIsA("BasePart")
    if not adornee then return end

    hammerBillboard = Instance.new("BillboardGui")
    hammerBillboard.Name = "HammerBillboard"
    hammerBillboard.Adornee = adornee
    hammerBillboard.Size = UDim2.new(0, 50, 0, 25)
    hammerBillboard.AlwaysOnTop = true
    hammerBillboard.Parent = adornee

    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = hammerModel.Name .. "-Code:7419"
    textLabel.TextScaled = true
    textLabel.TextColor3 = Color3.fromRGB(173, 216, 230)
    textLabel.Parent = hammerBillboard
end

local function removeHammerBillboard()
    if hammerBillboard and hammerBillboard.Parent then
        hammerBillboard:Destroy()
        hammerBillboard = nil
    end
end

local HammerToggle = ESPTab:CreateToggle({
    Name = "Hammer ESP",
    CurrentValue = false,
    Flag = "HammerESP",
    Callback = function(Value)
        if Value then
            addHammerBillboard()
        else
            removeHammerBillboard()
        end
    end
})

-- Pouch ESP
local pouchModel = workspace:WaitForChild("Pickups"):WaitForChild("Pouch")
local pouchBillboard

local function addPouchBillboard()
    if pouchBillboard then return end
    local adornee = pouchModel.PrimaryPart or pouchModel:FindFirstChildWhichIsA("BasePart")
    if not adornee then return end

    pouchBillboard = Instance.new("BillboardGui")
    pouchBillboard.Name = "PouchBillboard"
    pouchBillboard.Adornee = adornee
    pouchBillboard.Size = UDim2.new(0, 50, 0, 25)
    pouchBillboard.AlwaysOnTop = true
    pouchBillboard.Parent = adornee

    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = pouchModel.Name
    textLabel.TextScaled = true
    textLabel.TextColor3 = Color3.fromRGB(173, 216, 230)
    textLabel.Parent = pouchBillboard
end

local function removePouchBillboard()
    if pouchBillboard and pouchBillboard.Parent then
        pouchBillboard:Destroy()
        pouchBillboard = nil
    end
end

local PouchToggle = ESPTab:CreateToggle({
    Name = "Pouch ESP",
    CurrentValue = false,
    Flag = "PouchESP",
    Callback = function(Value)
        if Value then
            addPouchBillboard()
        else
            removePouchBillboard()
        end
    end
})
