local allowedPlaceIds = {
	8425637426, -- Replace with the allowed PlaceId(s)
}

if not table.find(allowedPlaceIds, game.PlaceId) then
	warn("This script is not allowed in this place.")
	return -- stops the script from continuing
end

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
	Name = "Write A Letter - Paper Hub ðŸ“„",
	Icon = 17104625041, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
	LoadingTitle = "Paper Hub v0.1",
	LoadingSubtitle = "by Dev_Smiley",
	ShowText = "Paper Hub ðŸ“„", -- for mobile users to unhide rayfield, change if you'd like
	Theme = "Ocean", -- Check https://docs.sirius.menu/rayfield/configuration/themes

	ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

	DisableRayfieldPrompts = false,
	DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

	ConfigurationSaving = {
		Enabled = true,
		FolderName = nil, -- Create a custom folder for your hub/game
		FileName = "Big Hub"
	},

	Discord = {
		Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
		Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
		RememberJoins = true -- Set this to false to make them join the discord every time they load it up
	},

	KeySystem = false, -- Set this to true to use our key system
	KeySettings = {
		Title = "Untitled",
		Subtitle = "Key System",
		Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
		FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
		SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
		GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
		Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
	}
})

local PlayerTab = Window:CreateTab("LocalPlayer", 4483362458) -- Title, Image
local ESPTab = Window:CreateTab("ESP", 4483362458) -- Title, Image
local CSettingsTab = Window:CreateTab("Client Settings", 4483362458) -- Title, Image

local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")
local player = game.Players.LocalPlayer

--Local Player Functions

local Players = game:GetService("Players")
local player = Players.LocalPlayer

local Label = PlayerTab:CreateLabel("We Use Loop Jump For Bypass Anti-Cheat Speed Changing. (Value 10 To Stop)", 4483362458, Color3.fromRGB(255, 205, 220), false)

local Slider = PlayerTab:CreateSlider({
	Name = "Walkspeed",
	Range = {10, 100},
	Increment = 1,
	Suffix = "Speed",
	CurrentValue = 0,
	Flag = "Slider1",
	Callback = function(Value)
		-- Stop any previous loop
		if player:FindFirstChild("WalkSpeedLoop") then
			player.WalkSpeedLoop:Destroy()
		end

		-- Create a new loop flag
		local loopFlag = Instance.new("BoolValue")
		loopFlag.Name = "WalkSpeedLoop"
		loopFlag.Parent = player

		-- Gradually adjust speed + make player jump until reaching 18
		task.spawn(function()
			while loopFlag.Parent and Value ~= 18 do
				local char = player.Character
				local humanoid = char and char:FindFirstChildOfClass("Humanoid")
				if humanoid then
					-- Set WalkSpeed
					humanoid.WalkSpeed = Value
					
					-- Make the player jump
					if humanoid:GetState() ~= Enum.HumanoidStateType.Jumping then
						humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
					end
				end
				task.wait(0.00001)
			end
		end)
	end,
})

local Slider = PlayerTab:CreateSlider({
	Name = "Jump Height",
	Range = {4.5, 50},
	Increment = 1,
	Suffix = "Current Jump Height",
	CurrentValue = 4.5,
	Flag = "Slider3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid").JumpHeight = Value
	end,
})

local Slider = PlayerTab:CreateSlider({
	Name = "Hip Height",
	Range = {0, 100},
	Increment = 1,
	Suffix = "Current Hip Height",
	CurrentValue = 0,
	Flag = "Slider4", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid").HipHeight = Value
	end,
})

--Toggle Buttons For Boolens
local Button = PlayerTab:CreateButton({
	Name = "Sit Player",
	Callback = function()
		game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid").Sit = true-- The function that takes place when the button is pressed
	end,
})

local Button = PlayerTab:CreateButton({
	Name = "Reset",
	Callback = function()
		game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid").Health = 0-- The function that takes place when the button is pressed
	end,
})
